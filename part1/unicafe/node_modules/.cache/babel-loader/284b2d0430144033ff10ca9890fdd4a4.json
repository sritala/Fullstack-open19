{"ast":null,"code":"import _slicedToArray from \"/Users/susanna/part-1/part1/unicafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/susanna/part-1/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = ({\n  text,\n  value\n}) => {\n  return React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, text), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, value));\n};\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad\n}) => {\n  let all = good + neutral + bad;\n  let average = (good + bad * -1) / all;\n  let positive = good / all * 100 + '%';\n\n  if ((good || neutral || bad) !== 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(Statistic, {\n      text: \"good\",\n      value: good,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      text: \"neutral\",\n      value: neutral,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      text: \"bad\",\n      value: bad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      text: \"all\",\n      value: all,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      text: \"average\",\n      value: average,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), React.createElement(Statistic, {\n      text: \"positive\",\n      value: positive,\n      extra: '%',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"No feedback given\");\n};\n\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        good = _useState2[0],\n        setGood = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        neutral = _useState4[0],\n        setNeutral = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        bad = _useState6[0],\n        setBad = _useState6[1];\n\n  const handleGood = () => setGood(good + 1);\n\n  const handleNeutral = () => setNeutral(neutral + 1);\n\n  const handleBad = () => setBad(bad + 1);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Give feedback\"), React.createElement(Button, {\n    text: \"good\",\n    onClickButton: handleGood,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Button, {\n    text: \"neutral\",\n    onClickButton: handleNeutral,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(Button, {\n    text: \"bad\",\n    onClickButton: handleBad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Statistics\"), React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\n\nconst Button = ({\n  text,\n  onClickButton\n}) => {\n  return React.createElement(\"button\", {\n    onClick: onClickButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, text);\n};\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/susanna/part-1/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistic","text","value","Statistics","good","neutral","bad","all","average","positive","App","setGood","setNeutral","setBad","handleGood","handleNeutral","handleBad","Button","onClickButton","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AACrC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKC,KAAL,CAFF,CADF;AAMD,CAPD;;AAQA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAA4B;AAC7C,MAAIC,GAAG,GAAGH,IAAI,GAAGC,OAAP,GAAiBC,GAA3B;AACA,MAAIE,OAAO,GAAG,CAACJ,IAAI,GAAGE,GAAG,GAAI,CAAC,CAAhB,IAAsBC,GAApC;AACA,MAAIE,QAAQ,GAAIL,IAAI,GAAGG,GAAR,GAAe,GAAf,GAAoB,GAAnC;;AAEA,MAAI,CAACH,IAAI,IAAIC,OAAR,IAAmBC,GAApB,MAA6B,CAAjC,EAAoC;AAClC,WACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,MAAhB;AAAuB,MAAA,KAAK,EAAEF,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAEM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,SAAhB;AAA0B,MAAA,KAAK,EAAEC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFN,EAGM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,KAAhB;AAAsB,MAAA,KAAK,EAAEC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHN,EAIM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,KAAhB;AAAsB,MAAA,KAAK,EAAEC,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJN,EAKM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,SAAhB;AAA0B,MAAA,KAAK,EAAEC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALN,EAMM,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,UAAhB;AAA2B,MAAA,KAAK,EAAEC,QAAlC;AAA4C,MAAA,KAAK,EAAE,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANN,CADF,CADE;AAYD;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AACD,CApBD;;AAsBA,MAAMC,GAAG,GAAG,MAAM;AAChB;AADgB,oBAEQZ,QAAQ,CAAC,CAAD,CAFhB;AAAA;AAAA,QAETM,IAFS;AAAA,QAEHO,OAFG;;AAAA,qBAGcb,QAAQ,CAAC,CAAD,CAHtB;AAAA;AAAA,QAGTO,OAHS;AAAA,QAGAO,UAHA;;AAAA,qBAIMd,QAAQ,CAAC,CAAD,CAJd;AAAA;AAAA,QAITQ,GAJS;AAAA,QAIJO,MAJI;;AAMhB,QAAMC,UAAU,GAAG,MAAMH,OAAO,CAACP,IAAI,GAAG,CAAR,CAAhC;;AACA,QAAMW,aAAa,GAAG,MAAMH,UAAU,CAACP,OAAO,GAAG,CAAX,CAAtC;;AACA,QAAMW,SAAS,GAAG,MAAMH,MAAM,CAACP,GAAG,GAAG,CAAP,CAA9B;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,aAAa,EAAEQ,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,aAAa,EAAEC,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,KAAb;AAAmB,IAAA,aAAa,EAAEC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,EAME,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEZ,IAAlB;AAAwB,IAAA,OAAO,EAAEC,OAAjC;AAA0C,IAAA,GAAG,EAAEC,GAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CApBD;;AAqBA,MAAMW,MAAM,GAAG,CAAC;AAAEhB,EAAAA,IAAF;AAAQiB,EAAAA;AAAR,CAAD,KAA6B;AAC1C,SACE;AAAQ,IAAA,OAAO,EAAEA,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCjB,IAAjC,CADF;AAGD,CAJD;;AAKAF,QAAQ,CAACoB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'    \n\nconst Statistic = ({ text, value }) => {\n  return (\n    <tr>\n      <td>{text}</td> \n      <td>{value}</td>\n    </tr>\n  );\n}\nconst Statistics = ({ good, neutral, bad }) => {\n  let all = good + neutral + bad;\n  let average = (good + bad * (-1)) / all;\n  let positive = (good / all) * 100 +'%';\n  \n  if ((good || neutral || bad) !== 0) {\n    return (\n  <div>\n    <table>\n          <Statistic text=\"good\" value={good} />\n          <Statistic text=\"neutral\" value={neutral} />\n          <Statistic text=\"bad\" value={bad} />\n          <Statistic text=\"all\" value={all} />\n          <Statistic text=\"average\" value={average} />\n          <Statistic text=\"positive\" value={positive} extra={'%'}/> \n          </table>\n     </div>\n    )\n  }\n  return <div>No feedback given</div>\n}\n\nconst App = () => {\n  // tallenna napit omaan tilaansa\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  \n  const handleGood = () => setGood(good + 1);\n  const handleNeutral = () => setNeutral(neutral + 1);\n  const handleBad = () => setBad(bad + 1);\n  \n  return (\n    <div>\n      <h1>Give feedback</h1>\n      <Button text=\"good\" onClickButton={handleGood} />\n      <Button text=\"neutral\" onClickButton={handleNeutral} />\n      <Button text=\"bad\" onClickButton={handleBad} />\n      <h2>Statistics</h2>\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\nconst Button = ({ text, onClickButton }) => {\n  return (\n    <button onClick={onClickButton}>{text}</button>\n  )\n}\nReactDOM.render(<App />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}